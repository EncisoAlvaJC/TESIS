xlab='d omega',ylab='Interferencia en frecuencias',
main='Ventana de Bartlett-Priestley')
lines(oo*dth,fun.t,type='l',col='red')
qq    = 100
oo    = 1+(0:qq)
fun   = rep(0,qq+1)
fun.t = rep(0,qq+1)
K.M   = K**2
K.M.t = K.t**2
for(i in oo){
ind      = 1:(length(K.M)-i+1)
fun[i]   = sum( K.M[ind]  *K.M[ind+i-1] )*dth
fun.t[i] = sum( K.M.t[ind]*K.M[ind+i-1] )*dth
}
plot(oo*dth,fun,type='l',bty='n',
xlab='d omega',ylab='Interferencia en frecuencias',
main='Ventana de Bartlett-Priestley')
lines(oo*dth,fun.t,type='l',col='red')
plot(oo*dth,fun,type='l',bty='n',ylim=c(mm,MM),
xlab='d omega',ylab='Interferencia en frecuencias',
main='Ventana de Bartlett-Priestley')
mm = min(min(fun),min(fun.t))
MM = max(max(fun),max(fun.t))
plot(oo*dth,fun,type='l',bty='n',ylim=c(mm,MM),
xlab='d omega',ylab='Interferencia en frecuencias',
main='Ventana de Bartlett-Priestley')
lines(oo*dth,fun.t,type='l',col='red')
legend(x='topright',legend=c('Original','Truncada'),
fill=c('black','red'),bty='n')
qq    = 200
oo    = 1+(0:qq)
fun   = rep(0,qq+1)
fun.t = rep(0,qq+1)
K.M   = K**2
K.M.t = K.t**2
for(i in oo){
ind      = 1:(length(K.M)-i+1)
fun[i]   = sum( K.M[ind]  *K.M[ind+i-1] )*dth
fun.t[i] = sum( K.M.t[ind]*K.M[ind+i-1] )*dth
}
mm = min(min(fun),min(fun.t))
MM = max(max(fun),max(fun.t))
plot(oo*dth,fun,type='l',bty='n',ylim=c(mm,MM),
xlab='d omega',ylab='Interferencia en frecuencias',
main='Ventana de Bartlett-Priestley')
lines(oo*dth,fun.t,type='l',col='red')
legend(x='topright',legend=c('Original','Truncada'),
fill=c('black','red'),bty='n')
qq    = 1000
oo    = 1+(0:qq)
fun   = rep(0,qq+1)
fun.t = rep(0,qq+1)
K.M   = K**2
K.M.t = K.t**2
for(i in oo){
ind      = 1:(length(K.M)-i+1)
fun[i]   = sum( K.M[ind]  *K.M[ind+i-1] )*dth
fun.t[i] = sum( K.M.t[ind]*K.M[ind+i-1] )*dth
}
mm = min(min(fun),min(fun.t))
MM = max(max(fun),max(fun.t))
plot(oo*dth,fun,type='l',bty='n',ylim=c(mm,MM),
xlab='d omega',ylab='Interferencia en frecuencias',
main='Ventana de Bartlett-Priestley')
lines(oo*dth,fun.t,type='l',col='red')
legend(x='topright',legend=c('Original','Truncada'),
fill=c('black','red'),bty='n')
qq    = 10000
oo    = 1+(0:qq)
fun   = rep(0,qq+1)
fun.t = rep(0,qq+1)
K.M   = K**2
K.M.t = K.t**2
for(i in oo){
ind      = 1:(length(K.M)-i+1)
fun[i]   = sum( K.M[ind]  *K.M[ind+i-1] )*dth
fun.t[i] = sum( K.M.t[ind]*K.M[ind+i-1] )*dth
}
maxi  = 10000
oo    = seq(1,maxi+1,by=200)
qq    = length(oo)
fun   = rep(0,qq+1)
fun.t = rep(0,qq+1)
K.M   = K**2
K.M.t = K.t**2
for(i in oo){
ind      = 1:(length(K.M)-i+1)
fun[i]   = sum( K.M[ind]  *K.M[ind+i-1] )*dth
fun.t[i] = sum( K.M.t[ind]*K.M[ind+i-1] )*dth
}
mm = min(min(fun),min(fun.t))
MM = max(max(fun),max(fun.t))
plot(oo*dth,fun,type='l',bty='n',ylim=c(mm,MM),
xlab='d omega',ylab='Interferencia en frecuencias',
main='Ventana de Bartlett-Priestley')
fun   = rep(0,qq)
fun.t = rep(0,qq)
K.M   = K**2
K.M.t = K.t**2
for(i in oo){
ind      = 1:(length(K.M)-i+1)
fun[i]   = sum( K.M[ind]  *K.M[ind+i-1] )*dth
fun.t[i] = sum( K.M.t[ind]*K.M[ind+i-1] )*dth
}
mm = min(min(fun),min(fun.t))
MM = max(max(fun),max(fun.t))
plot(oo*dth,fun,type='l',bty='n',ylim=c(mm,MM),
xlab='d omega',ylab='Interferencia en frecuencias',
main='Ventana de Bartlett-Priestley')
maxi  = 10000
oo    = seq(1,maxi+1,by=200)
qq    = length(oo)
fun   = rep(0,qq)
fun.t = rep(0,qq)
K.M   = K**2
K.M.t = K.t**2
for(i in 1:qq){
dd       = oo[i]
ind      = 1:(length(K.M)-dd+1)
fun[i]   = sum( K.M[ind]  *K.M[ind+dd-1] )*dth
fun.t[i] = sum( K.M.t[ind]*K.M[ind+dd-1] )*dth
}
mm = min(min(fun),min(fun.t))
MM = max(max(fun),max(fun.t))
plot(oo*dth,fun,type='l',bty='n',ylim=c(mm,MM),
xlab='d omega',ylab='Interferencia en frecuencias',
main='Ventana de Bartlett-Priestley')
lines(oo*dth,fun.t,type='l',col='red')
maxi  = 1000
oo    = seq(1,maxi+1,by=200)
qq    = length(oo)
fun   = rep(0,qq)
fun.t = rep(0,qq)
K.M   = K**2
K.M.t = K.t**2
for(i in 1:qq){
dd       = oo[i]
ind      = 1:(length(K.M)-dd+1)
fun[i]   = sum( K.M[ind]  *K.M[ind+dd-1] )*dth
fun.t[i] = sum( K.M.t[ind]*K.M[ind+dd-1] )*dth
}
mm = min(min(fun),min(fun.t))
MM = max(max(fun),max(fun.t))
plot(oo*dth,fun,type='l',bty='n',ylim=c(mm,MM),
xlab='d omega',ylab='Interferencia en frecuencias',
main='Ventana de Bartlett-Priestley')
lines(oo*dth,fun.t,type='l',col='red')
maxi  = 2000
oo    = seq(1,maxi+1,by=200)
qq    = length(oo)
fun   = rep(0,qq)
fun.t = rep(0,qq)
K.M   = K**2
K.M.t = K.t**2
for(i in 1:qq){
dd       = oo[i]
ind      = 1:(length(K.M)-dd+1)
fun[i]   = sum( K.M[ind]  *K.M[ind+dd-1] )*dth
fun.t[i] = sum( K.M.t[ind]*K.M[ind+dd-1] )*dth
}
mm = min(min(fun),min(fun.t))
MM = max(max(fun),max(fun.t))
plot(oo*dth,fun,type='l',bty='n',ylim=c(mm,MM),
xlab='d omega',ylab='Interferencia en frecuencias',
main='Ventana de Bartlett-Priestley')
lines(oo*dth,fun.t,type='l',col='red')
maxi  = 2000
oo    = seq(1,maxi+1,by=50)
qq    = length(oo)
fun   = rep(0,qq)
fun.t = rep(0,qq)
K.M   = K**2
K.M.t = K.t**2
for(i in 1:qq){
dd       = oo[i]
ind      = 1:(length(K.M)-dd+1)
fun[i]   = sum( K.M[ind]  *K.M[ind+dd-1] )*dth
fun.t[i] = sum( K.M.t[ind]*K.M[ind+dd-1] )*dth
}
mm = min(min(fun),min(fun.t))
MM = max(max(fun),max(fun.t))
plot(oo*dth,fun,type='l',bty='n',ylim=c(mm,MM),
xlab='d omega',ylab='Interferencia en frecuencias',
main='Ventana de Bartlett-Priestley')
lines(oo*dth,fun.t,type='l',col='red')
abline(h=.05,col='gray')
abline(h=.05,col='gray4')
abline(h=.05,col='blue')
plot(oo*dth,fun,type='l',bty='n',ylim=c(mm,MM),
xlab='d omega',ylab='Interferencia en frecuencias',
main='Ventana de Bartlett-Priestley')
lines(oo*dth,fun.t,type='l',col='red')
legend(x='topright',legend=c('Original','Truncada'),
fill=c('black','red'),bty='n')
abline(h=.05,col='blue')
ajuste   = 1/( sum(K**2)*dt )
ajuste.t = 1/( sum(K.t**2)*dt )
rr   = 10**5
mini = -150
maxi =  150
K   = fourierin(f=k,freq_adj=1,lower_int=-100,upper_int=100,const_adj=0,
lower_eval=mini,upper_eval=maxi,resol=rr)
K.t = fourierin(f=k.t,freq_adj=1,lower_int=-100,upper_int=100,const_adj=0,
lower_eval=mini,upper_eval=maxi,resol=rr)
th  = K$w
dth = t[2]-t[1]
K   = Mod(K$values  )
K.t = Mod(K.t$values)
ajuste   = 1/( sum(K**2)*dt )
ajuste.t = 1/( sum(K.t**2)*dt )
K   = K  *sqrt(ajuste  )
K.t = K.t*sqrt(ajuste.t)
B.G   = sum((th**2)*(K**2  ))*dth
B.G.t = sum((th**2)*(K.t**2))*dth
print(       'Ancho de banda (GAMMA)')
print(paste0('Normal  : ',toString(B.G)))
print(paste0('Truncado: ',toString(B.G.t)))
G4   = sum(K**4  )*dth
G4.t = sum(K.t**4)*dth
print(       'Factor int G**4')
print(paste0('Normal  : ',toString(G4)))
print(paste0('Truncado: ',toString(G4.t)))
maxi  = 2000
oo    = seq(1,maxi+1,by=50)
qq    = length(oo)
fun   = rep(0,qq)
fun.t = rep(0,qq)
ajuste   = 1/( sum(K**2)*dt )
ajuste.t = 1/( sum(K.t**2)*dt )
K   = K  *ajuste
K   = K  *sqrt(ajuste  )
K.t = K.t*sqrt(ajuste.t)
K.M   = K**2
K.M.t = K.t**2
for(i in 1:qq){
dd       = oo[i]
ind      = 1:(length(K.M)-dd+1)
fun[i]   = sum( K.M[ind]  *K.M[ind+dd-1] )*dth
fun.t[i] = sum( K.M.t[ind]*K.M[ind+dd-1] )*dth
}
mm = min(min(fun),min(fun.t))
MM = max(max(fun),max(fun.t))
plot(oo*dth,fun,type='l',bty='n',ylim=c(mm,MM),
xlab='d omega',ylab='Interferencia en frecuencias',
main='Ventana de Bartlett-Priestley')
lines(oo*dth,fun.t,type='l',col='red')
legend(x='topright',legend=c('Original','Truncada'),
fill=c('black','red'),bty='n')
abline(h=.05,col='blue')
install.packages("psd")
install.packages(c("RcppArmadillo", "scales", "tibble"))
install.packages("mgcv", lib="/usr/lib/R/library")
cite()
citation()
for(sujeto in 7:12){
source('~/TESIS/TESIS/img_ejemplos/colorcitos_usable03_todo.R')
}
sujeto
for(sujeto in 11:12){
source('~/TESIS/TESIS/img_ejemplos/colorcitos_usable03_todo.R')}
sujeto = 10
dir_actual = '~/TESIS/TESIS/img_ejemplos'
dir_graf   = '~/TESIS/TESIS/img_ejemplos'
dir_datos  = '~/TESIS/graf_datos/estacionariedad_sinfiltro/'
grabar_tot = T
v.nombres    = c('VCNNS1',
'MJNNVIGILOS',
'JANASUE',
'GH24031950SUEÃ‘O',
'GURM251148SUE',
'CLMN10SUE',
'RLMN10SUE',
'RRMNS',
'JGMN6SUE',
'FGHSUE',
'MGNA5SUE',
'EMNNS')
v.etiqueta   = c('VCR',
'MJH',
'JAE',
'GHA',
'MFGR',
'CLO',
'RLO',
'RRU',
'JGZ',
'FGH',
'MGG',
'EMT')
v.directorio = c('VCNNS',
'MJNNVIGILOScCanal',
'JANASUE_revisado',
'GH',
'GURM_revisado',
'CLMN10SUE',
'RLMN',
'RRMNS_2',
'JGMN6SUE',
'FGH_EEGdescompuesto',
'MGNA',
'EMNN')
frecuenciasss = c(200,
512,512,
200,
200,#segun valeria GUR=200 Hz
#512, #segun la libreta GURM=512
512,512,
200,#solo tiene 3 horas
512,
512,512,
200)
grupo_de = c(0,0,0,0,0,1,1,1,1,-1,-1,-1)
nombre      = v.nombres[sujeto]
etiqueta    = v.etiqueta[sujeto]
dir_res_mid = paste0(dir_datos,v.directorio[sujeto])
fr_muestreo  = frecuenciasss[sujeto]
stam         = T
orden_stam  = c(9,8,7,6,5,4,17,16,2,1,19,18,14,13,12,11,10,3,15,20,21,22)
grabar      = F
anotaciones = ''
reemplazar  = TRUE
canales      = 'PSG'
binario = T
escala  = F
zoom           = F
unidad_par_t   = 'tiempo'
ajuste_ini_hms = c(0,0,0)
paso    = 15*2
require('squash')
if(reemplazar){
if(canales=='10-20'){
canales = c('C3','C4','CZ','F3','F4','F7','F8','FP1','FP2','FZ','O1','O2',
'P3','P4','PZ','T3','T4','T5','T6')
}
if(canales=='PSG'){
canales = c('C3','C4','CZ','F3','F4','F7','F8','FP1','FP2','FZ','O1','O2',
'P3','P4','PZ','T3','T4','T5','T6','LOG','ROG','EMG')
if(stam){
canales = canales[orden_stam]
}
}
}
if(length(canales)<1){
stop('ERROR: Lista de canales tiene longitud cero')
}
if(grupo_de[sujeto]==0){
grupo = 'Nn'
}
if(grupo_de[sujeto]==1){
grupo = 'Mn'
}
if(grupo_de[sujeto]==-1){
grupo = 'ex'
}
qq   = .925/8
cont = .025
k = 1.5
setwd(dir_actual)
if(grabar_tot){
setwd(dir_actual)
#pdf(
png(
paste0(nombre,'_comp_est_',
#'.pdf'),width=5.941*k,height=1*k)
'.png'),units='in',res=300,width=5.941*k,height=9*k)
}
par(oma=c(0,0,0,0),
mar=c(.25, 2+1.5, .25, 2),
mgp=c(1.5,.5,0))
setwd(dir_actual)
dur_epoca = 30/(2**5)
par(fig=c(0,1,cont,cont+qq), new=FALSE)
n_canales = length(canales)
ventana   = dur_epoca*fr_muestreo
if(unidad_par_t =='tiempo'){
ini_t   = ajuste_ini_hms[1]*60*60
+ajuste_ini_hms[2]*60
+ajuste_ini_hms[3]
ini_epo = ini_t/dur_epoca
ini_pt  = floor(ini_t*fr_muestreo)
}
if(unidad_par_t =='puntos'){
ini_epo = ajuste_ini_epo
ini_t   = ini_epo*dur_epoca
ini_pt  = ini_epo*ventana
}
str_t   = 0
str_epo = 1
str_pt  = 1
min_e = 1
setwd(dir_res_mid)
ch            = 1
ch_actual     = canales[ch]
nom_arch      = paste0('EST_',nombre,'_',ch_actual,
'_T_',toString(dur_epoca),'.txt')
pv_t          = scan(nom_arch)
pv_t          = as.numeric(t(pv_t))
factor_escala = dur_epoca/30
n_epocas      = length(pv_t)
max_e         = n_epocas
RES_T   = matrix(nrow=n_canales,ncol=n_epocas)
RES_TIR = matrix(nrow=n_canales,ncol=n_epocas)
ch = 1
ch_actual = canales[ch]
nom_arch  = paste0('EST_',nombre,'_',ch_actual,
'_T_'  ,toString(dur_epoca),'.txt')
pv_t      = scan(nom_arch)
pv_t      = as.numeric(t(pv_t))
nom_arch  = paste0('EST_',nombre,'_',ch_actual,
'_TIR_',toString(dur_epoca),'.txt')
pv_tir    = scan(nom_arch)
pv_tir    = as.numeric(t(pv_tir))
RES_T[ch,]   = pv_t
RES_TIR[ch,] = pv_tir
for(ch in 1:n_canales){
# cargar los datos
ch_actual = canales[ch]
nom_arch  = paste0('EST_',nombre,'_',ch_actual,
'_T_'  ,toString(dur_epoca),'.txt')
pv_t      = scan(nom_arch)
pv_t      = as.numeric(t(pv_t))
nom_arch  = paste0('EST_',nombre,'_',ch_actual,
'_TIR_',toString(dur_epoca),'.txt')
pv_tir    = scan(nom_arch)
pv_tir    = as.numeric(t(pv_tir))
#if(zoom){
#  pv_t    =   pv_t[min_epo:max_epo]
#  pv_tir  = pv_tir[min_epo:max_epo]
#}
# organizacion de los datos en una matriz
RES_T[ch,]   = pv_t
RES_TIR[ch,] = pv_tir
}
ch
ch_actual = canales[ch]
nom_arch  = paste0('EST_',nombre,'_',ch_actual,
'_T_'  ,toString(dur_epoca),'.txt')
pv_t      = scan(nom_arch)
pv_t      = as.numeric(t(pv_t))
nom_arch  = paste0('EST_',nombre,'_',ch_actual,
'_TIR_',toString(dur_epoca),'.txt')
pv_tir    = scan(nom_arch)
pv_tir    = as.numeric(t(pv_tir))
RES_T   = matrix(nrow=n_canales,ncol=n_epocas)
RES_TIR = matrix(nrow=n_canales,ncol=n_epocas)
for(ch in 1:n_canales){
# cargar los datos
ch_actual = canales[ch]
nom_arch  = paste0('EST_',nombre,'_',ch_actual,
'_T_'  ,toString(dur_epoca),'.txt')
pv_t      = scan(nom_arch)
pv_t      = as.numeric(t(pv_t))
nom_arch  = paste0('EST_',nombre,'_',ch_actual,
'_TIR_',toString(dur_epoca),'.txt')
pv_tir    = scan(nom_arch)
pv_tir    = as.numeric(t(pv_tir))
#if(zoom){
#  pv_t    =   pv_t[min_epo:max_epo]
#  pv_tir  = pv_tir[min_epo:max_epo]
#}
mmm1 = min(n_epocas,length(pv_t))
mmm2 = min(n_epocas,length(pv_tir))
# organizacion de los datos en una matriz
RES_T[ch,1:mmm1]   = pv_t[1:mmm1]
RES_TIR[ch,1:mmm2] = pv_tir[1:mmm2]
}
RES_T   = matrix(0,nrow=n_canales,ncol=n_epocas)
RES_TIR = matrix(0,nrow=n_canales,ncol=n_epocas)
for(ch in 1:n_canales){
# cargar los datos
ch_actual = canales[ch]
nom_arch  = paste0('EST_',nombre,'_',ch_actual,
'_T_'  ,toString(dur_epoca),'.txt')
pv_t      = scan(nom_arch)
pv_t      = as.numeric(t(pv_t))
nom_arch  = paste0('EST_',nombre,'_',ch_actual,
'_TIR_',toString(dur_epoca),'.txt')
pv_tir    = scan(nom_arch)
pv_tir    = as.numeric(t(pv_tir))
#if(zoom){
#  pv_t    =   pv_t[min_epo:max_epo]
#  pv_tir  = pv_tir[min_epo:max_epo]
#}
mmm1 = min(n_epocas,length(pv_t))
mmm2 = min(n_epocas,length(pv_tir))
# organizacion de los datos en una matriz
RES_T[ch,1:mmm1]   = pv_t[1:mmm1]
RES_TIR[ch,1:mmm2] = pv_tir[1:mmm2]
}
pass  = paso/dur_epoca
if(binario){
if(FALSE){
n_pvals = length(p.vales)
M_RES   = matrix(0,nrow=n_canales,ncol=n_epocas)
for(i in 1:n_pvals){
M_RES = M_RES + 1*( RES_T>p.vales[i])
}
RES_T   = (M_RES/length(p.vales))**3
}else{
M_RES1 = 1*( RES_TIR<.05 )
M_RES2 = 1*( RES_T  <.05 )
M_RES = pmin(M_RES1,M_RES2)
RES_T = (-M_RES+1)*.95 + .025
}
}
dev.off()
dev.off()
dev.off()
source('~/TESIS/TESIS/img_ejemplos/colorcitos_usable03_todo.R')
for(sujeto in 10:12){
source('~/TESIS/TESIS/img_ejemplos/colorcitos_usable03_todo.R')
}
